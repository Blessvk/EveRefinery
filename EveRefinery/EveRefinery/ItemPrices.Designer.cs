//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4200
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace EveRefinery {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("ItemPrices")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class ItemPrices : global::System.Data.DataSet {
        
        private PricesDataTable tablePrices;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ItemPrices() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected ItemPrices(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["Prices"] != null)) {
                    base.Tables.Add(new PricesDataTable(ds.Tables["Prices"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PricesDataTable Prices {
            get {
                return this.tablePrices;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            ItemPrices cln = ((ItemPrices)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Prices"] != null)) {
                    base.Tables.Add(new PricesDataTable(ds.Tables["Prices"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tablePrices = ((PricesDataTable)(base.Tables["Prices"]));
            if ((initTable == true)) {
                if ((this.tablePrices != null)) {
                    this.tablePrices.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "ItemPrices";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/ItemPrices.xsd";
            this.Locale = new global::System.Globalization.CultureInfo("en-US");
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tablePrices = new PricesDataTable();
            base.Tables.Add(this.tablePrices);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePrices() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            ItemPrices ds = new ItemPrices();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void PricesRowChangeEventHandler(object sender, PricesRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PricesDataTable : global::System.Data.TypedTableBase<PricesRow> {
            
            private global::System.Data.DataColumn columnTypeID;
            
            private global::System.Data.DataColumn columnRegionID;
            
            private global::System.Data.DataColumn columnAllAvg;
            
            private global::System.Data.DataColumn columnAllMax;
            
            private global::System.Data.DataColumn columnAllMin;
            
            private global::System.Data.DataColumn columnAllMedian;
            
            private global::System.Data.DataColumn columnAllStdDev;
            
            private global::System.Data.DataColumn columnAllVolume;
            
            private global::System.Data.DataColumn columnBuyAvg;
            
            private global::System.Data.DataColumn columnBuyMax;
            
            private global::System.Data.DataColumn columnBuyMin;
            
            private global::System.Data.DataColumn columnBuyMedian;
            
            private global::System.Data.DataColumn columnBuyStdDev;
            
            private global::System.Data.DataColumn columnBuyVolume;
            
            private global::System.Data.DataColumn columnSellAvg;
            
            private global::System.Data.DataColumn columnSellMax;
            
            private global::System.Data.DataColumn columnSellMin;
            
            private global::System.Data.DataColumn columnSellMedian;
            
            private global::System.Data.DataColumn columnSellStdDev;
            
            private global::System.Data.DataColumn columnSellVolume;
            
            private global::System.Data.DataColumn columnUpdateTime;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PricesDataTable() {
                this.TableName = "Prices";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PricesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PricesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TypeIDColumn {
                get {
                    return this.columnTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RegionIDColumn {
                get {
                    return this.columnRegionID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AllAvgColumn {
                get {
                    return this.columnAllAvg;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AllMaxColumn {
                get {
                    return this.columnAllMax;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AllMinColumn {
                get {
                    return this.columnAllMin;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AllMedianColumn {
                get {
                    return this.columnAllMedian;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AllStdDevColumn {
                get {
                    return this.columnAllStdDev;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AllVolumeColumn {
                get {
                    return this.columnAllVolume;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BuyAvgColumn {
                get {
                    return this.columnBuyAvg;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BuyMaxColumn {
                get {
                    return this.columnBuyMax;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BuyMinColumn {
                get {
                    return this.columnBuyMin;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BuyMedianColumn {
                get {
                    return this.columnBuyMedian;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BuyStdDevColumn {
                get {
                    return this.columnBuyStdDev;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BuyVolumeColumn {
                get {
                    return this.columnBuyVolume;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SellAvgColumn {
                get {
                    return this.columnSellAvg;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SellMaxColumn {
                get {
                    return this.columnSellMax;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SellMinColumn {
                get {
                    return this.columnSellMin;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SellMedianColumn {
                get {
                    return this.columnSellMedian;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SellStdDevColumn {
                get {
                    return this.columnSellStdDev;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SellVolumeColumn {
                get {
                    return this.columnSellVolume;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UpdateTimeColumn {
                get {
                    return this.columnUpdateTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PricesRow this[int index] {
                get {
                    return ((PricesRow)(this.Rows[index]));
                }
            }
            
            public event PricesRowChangeEventHandler PricesRowChanging;
            
            public event PricesRowChangeEventHandler PricesRowChanged;
            
            public event PricesRowChangeEventHandler PricesRowDeleting;
            
            public event PricesRowChangeEventHandler PricesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPricesRow(PricesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PricesRow AddPricesRow(
                        uint TypeID, 
                        uint RegionID, 
                        double AllAvg, 
                        double AllMax, 
                        double AllMin, 
                        double AllMedian, 
                        double AllStdDev, 
                        ulong AllVolume, 
                        double BuyAvg, 
                        double BuyMax, 
                        double BuyMin, 
                        double BuyMedian, 
                        double BuyStdDev, 
                        ulong BuyVolume, 
                        double SellAvg, 
                        double SellMax, 
                        double SellMin, 
                        double SellMedian, 
                        double SellStdDev, 
                        ulong SellVolume, 
                        ulong UpdateTime) {
                PricesRow rowPricesRow = ((PricesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        TypeID,
                        RegionID,
                        AllAvg,
                        AllMax,
                        AllMin,
                        AllMedian,
                        AllStdDev,
                        AllVolume,
                        BuyAvg,
                        BuyMax,
                        BuyMin,
                        BuyMedian,
                        BuyStdDev,
                        BuyVolume,
                        SellAvg,
                        SellMax,
                        SellMin,
                        SellMedian,
                        SellStdDev,
                        SellVolume,
                        UpdateTime};
                rowPricesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPricesRow);
                return rowPricesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PricesRow FindByTypeIDRegionID(uint TypeID, uint RegionID) {
                return ((PricesRow)(this.Rows.Find(new object[] {
                            TypeID,
                            RegionID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PricesDataTable cln = ((PricesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PricesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTypeID = base.Columns["TypeID"];
                this.columnRegionID = base.Columns["RegionID"];
                this.columnAllAvg = base.Columns["AllAvg"];
                this.columnAllMax = base.Columns["AllMax"];
                this.columnAllMin = base.Columns["AllMin"];
                this.columnAllMedian = base.Columns["AllMedian"];
                this.columnAllStdDev = base.Columns["AllStdDev"];
                this.columnAllVolume = base.Columns["AllVolume"];
                this.columnBuyAvg = base.Columns["BuyAvg"];
                this.columnBuyMax = base.Columns["BuyMax"];
                this.columnBuyMin = base.Columns["BuyMin"];
                this.columnBuyMedian = base.Columns["BuyMedian"];
                this.columnBuyStdDev = base.Columns["BuyStdDev"];
                this.columnBuyVolume = base.Columns["BuyVolume"];
                this.columnSellAvg = base.Columns["SellAvg"];
                this.columnSellMax = base.Columns["SellMax"];
                this.columnSellMin = base.Columns["SellMin"];
                this.columnSellMedian = base.Columns["SellMedian"];
                this.columnSellStdDev = base.Columns["SellStdDev"];
                this.columnSellVolume = base.Columns["SellVolume"];
                this.columnUpdateTime = base.Columns["UpdateTime"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTypeID = new global::System.Data.DataColumn("TypeID", typeof(uint), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTypeID);
                this.columnRegionID = new global::System.Data.DataColumn("RegionID", typeof(uint), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRegionID);
                this.columnAllAvg = new global::System.Data.DataColumn("AllAvg", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAllAvg);
                this.columnAllMax = new global::System.Data.DataColumn("AllMax", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAllMax);
                this.columnAllMin = new global::System.Data.DataColumn("AllMin", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAllMin);
                this.columnAllMedian = new global::System.Data.DataColumn("AllMedian", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAllMedian);
                this.columnAllStdDev = new global::System.Data.DataColumn("AllStdDev", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAllStdDev);
                this.columnAllVolume = new global::System.Data.DataColumn("AllVolume", typeof(ulong), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAllVolume);
                this.columnBuyAvg = new global::System.Data.DataColumn("BuyAvg", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBuyAvg);
                this.columnBuyMax = new global::System.Data.DataColumn("BuyMax", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBuyMax);
                this.columnBuyMin = new global::System.Data.DataColumn("BuyMin", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBuyMin);
                this.columnBuyMedian = new global::System.Data.DataColumn("BuyMedian", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBuyMedian);
                this.columnBuyStdDev = new global::System.Data.DataColumn("BuyStdDev", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBuyStdDev);
                this.columnBuyVolume = new global::System.Data.DataColumn("BuyVolume", typeof(ulong), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBuyVolume);
                this.columnSellAvg = new global::System.Data.DataColumn("SellAvg", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSellAvg);
                this.columnSellMax = new global::System.Data.DataColumn("SellMax", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSellMax);
                this.columnSellMin = new global::System.Data.DataColumn("SellMin", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSellMin);
                this.columnSellMedian = new global::System.Data.DataColumn("SellMedian", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSellMedian);
                this.columnSellStdDev = new global::System.Data.DataColumn("SellStdDev", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSellStdDev);
                this.columnSellVolume = new global::System.Data.DataColumn("SellVolume", typeof(ulong), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSellVolume);
                this.columnUpdateTime = new global::System.Data.DataColumn("UpdateTime", typeof(ulong), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUpdateTime);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnTypeID,
                                this.columnRegionID}, true));
                this.columnTypeID.AllowDBNull = false;
                this.columnRegionID.AllowDBNull = false;
                this.Locale = new global::System.Globalization.CultureInfo("en-US");
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PricesRow NewPricesRow() {
                return ((PricesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PricesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PricesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PricesRowChanged != null)) {
                    this.PricesRowChanged(this, new PricesRowChangeEvent(((PricesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PricesRowChanging != null)) {
                    this.PricesRowChanging(this, new PricesRowChangeEvent(((PricesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PricesRowDeleted != null)) {
                    this.PricesRowDeleted(this, new PricesRowChangeEvent(((PricesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PricesRowDeleting != null)) {
                    this.PricesRowDeleting(this, new PricesRowChangeEvent(((PricesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePricesRow(PricesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ItemPrices ds = new ItemPrices();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PricesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PricesRow : global::System.Data.DataRow {
            
            private PricesDataTable tablePrices;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PricesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePrices = ((PricesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public uint TypeID {
                get {
                    return ((uint)(this[this.tablePrices.TypeIDColumn]));
                }
                set {
                    this[this.tablePrices.TypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public uint RegionID {
                get {
                    return ((uint)(this[this.tablePrices.RegionIDColumn]));
                }
                set {
                    this[this.tablePrices.RegionIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double AllAvg {
                get {
                    try {
                        return ((double)(this[this.tablePrices.AllAvgColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AllAvg\' in table \'Prices\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrices.AllAvgColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double AllMax {
                get {
                    try {
                        return ((double)(this[this.tablePrices.AllMaxColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AllMax\' in table \'Prices\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrices.AllMaxColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double AllMin {
                get {
                    try {
                        return ((double)(this[this.tablePrices.AllMinColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AllMin\' in table \'Prices\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrices.AllMinColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double AllMedian {
                get {
                    try {
                        return ((double)(this[this.tablePrices.AllMedianColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AllMedian\' in table \'Prices\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrices.AllMedianColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double AllStdDev {
                get {
                    try {
                        return ((double)(this[this.tablePrices.AllStdDevColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AllStdDev\' in table \'Prices\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrices.AllStdDevColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ulong AllVolume {
                get {
                    try {
                        return ((ulong)(this[this.tablePrices.AllVolumeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AllVolume\' in table \'Prices\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrices.AllVolumeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double BuyAvg {
                get {
                    try {
                        return ((double)(this[this.tablePrices.BuyAvgColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BuyAvg\' in table \'Prices\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrices.BuyAvgColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double BuyMax {
                get {
                    try {
                        return ((double)(this[this.tablePrices.BuyMaxColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BuyMax\' in table \'Prices\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrices.BuyMaxColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double BuyMin {
                get {
                    try {
                        return ((double)(this[this.tablePrices.BuyMinColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BuyMin\' in table \'Prices\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrices.BuyMinColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double BuyMedian {
                get {
                    try {
                        return ((double)(this[this.tablePrices.BuyMedianColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BuyMedian\' in table \'Prices\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrices.BuyMedianColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double BuyStdDev {
                get {
                    try {
                        return ((double)(this[this.tablePrices.BuyStdDevColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BuyStdDev\' in table \'Prices\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrices.BuyStdDevColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ulong BuyVolume {
                get {
                    try {
                        return ((ulong)(this[this.tablePrices.BuyVolumeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BuyVolume\' in table \'Prices\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrices.BuyVolumeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double SellAvg {
                get {
                    try {
                        return ((double)(this[this.tablePrices.SellAvgColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SellAvg\' in table \'Prices\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrices.SellAvgColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double SellMax {
                get {
                    try {
                        return ((double)(this[this.tablePrices.SellMaxColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SellMax\' in table \'Prices\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrices.SellMaxColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double SellMin {
                get {
                    try {
                        return ((double)(this[this.tablePrices.SellMinColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SellMin\' in table \'Prices\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrices.SellMinColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double SellMedian {
                get {
                    try {
                        return ((double)(this[this.tablePrices.SellMedianColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SellMedian\' in table \'Prices\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrices.SellMedianColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double SellStdDev {
                get {
                    try {
                        return ((double)(this[this.tablePrices.SellStdDevColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SellStdDev\' in table \'Prices\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrices.SellStdDevColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ulong SellVolume {
                get {
                    try {
                        return ((ulong)(this[this.tablePrices.SellVolumeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SellVolume\' in table \'Prices\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrices.SellVolumeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ulong UpdateTime {
                get {
                    try {
                        return ((ulong)(this[this.tablePrices.UpdateTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UpdateTime\' in table \'Prices\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrices.UpdateTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAllAvgNull() {
                return this.IsNull(this.tablePrices.AllAvgColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAllAvgNull() {
                this[this.tablePrices.AllAvgColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAllMaxNull() {
                return this.IsNull(this.tablePrices.AllMaxColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAllMaxNull() {
                this[this.tablePrices.AllMaxColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAllMinNull() {
                return this.IsNull(this.tablePrices.AllMinColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAllMinNull() {
                this[this.tablePrices.AllMinColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAllMedianNull() {
                return this.IsNull(this.tablePrices.AllMedianColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAllMedianNull() {
                this[this.tablePrices.AllMedianColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAllStdDevNull() {
                return this.IsNull(this.tablePrices.AllStdDevColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAllStdDevNull() {
                this[this.tablePrices.AllStdDevColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAllVolumeNull() {
                return this.IsNull(this.tablePrices.AllVolumeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAllVolumeNull() {
                this[this.tablePrices.AllVolumeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBuyAvgNull() {
                return this.IsNull(this.tablePrices.BuyAvgColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBuyAvgNull() {
                this[this.tablePrices.BuyAvgColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBuyMaxNull() {
                return this.IsNull(this.tablePrices.BuyMaxColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBuyMaxNull() {
                this[this.tablePrices.BuyMaxColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBuyMinNull() {
                return this.IsNull(this.tablePrices.BuyMinColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBuyMinNull() {
                this[this.tablePrices.BuyMinColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBuyMedianNull() {
                return this.IsNull(this.tablePrices.BuyMedianColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBuyMedianNull() {
                this[this.tablePrices.BuyMedianColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBuyStdDevNull() {
                return this.IsNull(this.tablePrices.BuyStdDevColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBuyStdDevNull() {
                this[this.tablePrices.BuyStdDevColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBuyVolumeNull() {
                return this.IsNull(this.tablePrices.BuyVolumeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBuyVolumeNull() {
                this[this.tablePrices.BuyVolumeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSellAvgNull() {
                return this.IsNull(this.tablePrices.SellAvgColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSellAvgNull() {
                this[this.tablePrices.SellAvgColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSellMaxNull() {
                return this.IsNull(this.tablePrices.SellMaxColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSellMaxNull() {
                this[this.tablePrices.SellMaxColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSellMinNull() {
                return this.IsNull(this.tablePrices.SellMinColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSellMinNull() {
                this[this.tablePrices.SellMinColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSellMedianNull() {
                return this.IsNull(this.tablePrices.SellMedianColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSellMedianNull() {
                this[this.tablePrices.SellMedianColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSellStdDevNull() {
                return this.IsNull(this.tablePrices.SellStdDevColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSellStdDevNull() {
                this[this.tablePrices.SellStdDevColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSellVolumeNull() {
                return this.IsNull(this.tablePrices.SellVolumeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSellVolumeNull() {
                this[this.tablePrices.SellVolumeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUpdateTimeNull() {
                return this.IsNull(this.tablePrices.UpdateTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUpdateTimeNull() {
                this[this.tablePrices.UpdateTimeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PricesRowChangeEvent : global::System.EventArgs {
            
            private PricesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PricesRowChangeEvent(PricesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PricesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591